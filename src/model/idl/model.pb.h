// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
namespace model {
namespace idl {
class ExtraInfo;
struct ExtraInfoDefaultTypeInternal;
extern ExtraInfoDefaultTypeInternal _ExtraInfo_default_instance_;
class People;
struct PeopleDefaultTypeInternal;
extern PeopleDefaultTypeInternal _People_default_instance_;
class People_ExtraEntry_DoNotUse;
struct People_ExtraEntry_DoNotUseDefaultTypeInternal;
extern People_ExtraEntry_DoNotUseDefaultTypeInternal _People_ExtraEntry_DoNotUse_default_instance_;
}  // namespace idl
}  // namespace model
PROTOBUF_NAMESPACE_OPEN
template<> ::model::idl::ExtraInfo* Arena::CreateMaybeMessage<::model::idl::ExtraInfo>(Arena*);
template<> ::model::idl::People* Arena::CreateMaybeMessage<::model::idl::People>(Arena*);
template<> ::model::idl::People_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::model::idl::People_ExtraEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace model {
namespace idl {

enum Gender : int {
  Female = 1,
  Male = 2
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = Female;
constexpr Gender Gender_MAX = Male;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class People_ExtraEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<People_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<People_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  People_ExtraEntry_DoNotUse();
  explicit constexpr People_ExtraEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit People_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const People_ExtraEntry_DoNotUse& other);
  static const People_ExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const People_ExtraEntry_DoNotUse*>(&_People_ExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "model.idl.People.ExtraEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "model.idl.People.ExtraEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class People final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model.idl.People) */ {
 public:
  inline People() : People(nullptr) {}
  ~People() override;
  explicit constexpr People(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  People(const People& from);
  People(People&& from) noexcept
    : People() {
    *this = ::std::move(from);
  }

  inline People& operator=(const People& from) {
    CopyFrom(from);
    return *this;
  }
  inline People& operator=(People&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const People& default_instance() {
    return *internal_default_instance();
  }
  static inline const People* internal_default_instance() {
    return reinterpret_cast<const People*>(
               &_People_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(People& a, People& b) {
    a.Swap(&b);
  }
  inline void Swap(People* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(People* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  People* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<People>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const People& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const People& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(People* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model.idl.People";
  }
  protected:
  explicit People(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraListFieldNumber = 4,
    kExtraFieldNumber = 5,
    kNameFieldNumber = 2,
    kExtraInfoFieldNumber = 6,
    kIDFieldNumber = 1,
    kStatusFieldNumber = 7,
    kID32FieldNumber = 8,
    kGenderFieldNumber = 3,
  };
  // repeated string ExtraList = 4;
  int extralist_size() const;
  private:
  int _internal_extralist_size() const;
  public:
  void clear_extralist();
  const std::string& extralist(int index) const;
  std::string* mutable_extralist(int index);
  void set_extralist(int index, const std::string& value);
  void set_extralist(int index, std::string&& value);
  void set_extralist(int index, const char* value);
  void set_extralist(int index, const char* value, size_t size);
  std::string* add_extralist();
  void add_extralist(const std::string& value);
  void add_extralist(std::string&& value);
  void add_extralist(const char* value);
  void add_extralist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extralist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extralist();
  private:
  const std::string& _internal_extralist(int index) const;
  std::string* _internal_add_extralist();
  public:

  // map<string, string> Extra = 5;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra();

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .model.idl.ExtraInfo ExtraInfo = 6;
  bool has_extrainfo() const;
  private:
  bool _internal_has_extrainfo() const;
  public:
  void clear_extrainfo();
  const ::model::idl::ExtraInfo& extrainfo() const;
  PROTOBUF_NODISCARD ::model::idl::ExtraInfo* release_extrainfo();
  ::model::idl::ExtraInfo* mutable_extrainfo();
  void set_allocated_extrainfo(::model::idl::ExtraInfo* extrainfo);
  private:
  const ::model::idl::ExtraInfo& _internal_extrainfo() const;
  ::model::idl::ExtraInfo* _internal_mutable_extrainfo();
  public:
  void unsafe_arena_set_allocated_extrainfo(
      ::model::idl::ExtraInfo* extrainfo);
  ::model::idl::ExtraInfo* unsafe_arena_release_extrainfo();

  // optional int64 ID = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional .model.idl.Status status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::model::idl::Status status() const;
  void set_status(::model::idl::Status value);
  private:
  ::model::idl::Status _internal_status() const;
  void _internal_set_status(::model::idl::Status value);
  public:

  // optional int32 ID32 = 8;
  bool has_id32() const;
  private:
  bool _internal_has_id32() const;
  public:
  void clear_id32();
  int32_t id32() const;
  void set_id32(int32_t value);
  private:
  int32_t _internal_id32() const;
  void _internal_set_id32(int32_t value);
  public:

  // optional .model.idl.Gender Gender = 3;
  bool has_gender() const;
  private:
  bool _internal_has_gender() const;
  public:
  void clear_gender();
  ::model::idl::Gender gender() const;
  void set_gender(::model::idl::Gender value);
  private:
  ::model::idl::Gender _internal_gender() const;
  void _internal_set_gender(::model::idl::Gender value);
  public:

  // @@protoc_insertion_point(class_scope:model.idl.People)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extralist_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      People_ExtraEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::model::idl::ExtraInfo* extrainfo_;
  int64_t id_;
  int status_;
  int32_t id32_;
  int gender_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class ExtraInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model.idl.ExtraInfo) */ {
 public:
  inline ExtraInfo() : ExtraInfo(nullptr) {}
  ~ExtraInfo() override;
  explicit constexpr ExtraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtraInfo(const ExtraInfo& from);
  ExtraInfo(ExtraInfo&& from) noexcept
    : ExtraInfo() {
    *this = ::std::move(from);
  }

  inline ExtraInfo& operator=(const ExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraInfo& operator=(ExtraInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtraInfo* internal_default_instance() {
    return reinterpret_cast<const ExtraInfo*>(
               &_ExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExtraInfo& a, ExtraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtraInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtraInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtraInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model.idl.ExtraInfo";
  }
  protected:
  explicit ExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:model.idl.ExtraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// People

// optional int64 ID = 1;
inline bool People::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool People::has_id() const {
  return _internal_has_id();
}
inline void People::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t People::_internal_id() const {
  return id_;
}
inline int64_t People::id() const {
  // @@protoc_insertion_point(field_get:model.idl.People.ID)
  return _internal_id();
}
inline void People::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void People::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:model.idl.People.ID)
}

// optional string Name = 2;
inline bool People::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool People::has_name() const {
  return _internal_has_name();
}
inline void People::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& People::name() const {
  // @@protoc_insertion_point(field_get:model.idl.People.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void People::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model.idl.People.Name)
}
inline std::string* People::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:model.idl.People.Name)
  return _s;
}
inline const std::string& People::_internal_name() const {
  return name_.Get();
}
inline void People::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* People::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* People::release_name() {
  // @@protoc_insertion_point(field_release:model.idl.People.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void People::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model.idl.People.Name)
}

// optional .model.idl.Gender Gender = 3;
inline bool People::_internal_has_gender() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool People::has_gender() const {
  return _internal_has_gender();
}
inline void People::clear_gender() {
  gender_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::model::idl::Gender People::_internal_gender() const {
  return static_cast< ::model::idl::Gender >(gender_);
}
inline ::model::idl::Gender People::gender() const {
  // @@protoc_insertion_point(field_get:model.idl.People.Gender)
  return _internal_gender();
}
inline void People::_internal_set_gender(::model::idl::Gender value) {
  assert(::model::idl::Gender_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  gender_ = value;
}
inline void People::set_gender(::model::idl::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:model.idl.People.Gender)
}

// repeated string ExtraList = 4;
inline int People::_internal_extralist_size() const {
  return extralist_.size();
}
inline int People::extralist_size() const {
  return _internal_extralist_size();
}
inline void People::clear_extralist() {
  extralist_.Clear();
}
inline std::string* People::add_extralist() {
  std::string* _s = _internal_add_extralist();
  // @@protoc_insertion_point(field_add_mutable:model.idl.People.ExtraList)
  return _s;
}
inline const std::string& People::_internal_extralist(int index) const {
  return extralist_.Get(index);
}
inline const std::string& People::extralist(int index) const {
  // @@protoc_insertion_point(field_get:model.idl.People.ExtraList)
  return _internal_extralist(index);
}
inline std::string* People::mutable_extralist(int index) {
  // @@protoc_insertion_point(field_mutable:model.idl.People.ExtraList)
  return extralist_.Mutable(index);
}
inline void People::set_extralist(int index, const std::string& value) {
  extralist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:model.idl.People.ExtraList)
}
inline void People::set_extralist(int index, std::string&& value) {
  extralist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:model.idl.People.ExtraList)
}
inline void People::set_extralist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extralist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:model.idl.People.ExtraList)
}
inline void People::set_extralist(int index, const char* value, size_t size) {
  extralist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.idl.People.ExtraList)
}
inline std::string* People::_internal_add_extralist() {
  return extralist_.Add();
}
inline void People::add_extralist(const std::string& value) {
  extralist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:model.idl.People.ExtraList)
}
inline void People::add_extralist(std::string&& value) {
  extralist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:model.idl.People.ExtraList)
}
inline void People::add_extralist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extralist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:model.idl.People.ExtraList)
}
inline void People::add_extralist(const char* value, size_t size) {
  extralist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:model.idl.People.ExtraList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
People::extralist() const {
  // @@protoc_insertion_point(field_list:model.idl.People.ExtraList)
  return extralist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
People::mutable_extralist() {
  // @@protoc_insertion_point(field_mutable_list:model.idl.People.ExtraList)
  return &extralist_;
}

// map<string, string> Extra = 5;
inline int People::_internal_extra_size() const {
  return extra_.size();
}
inline int People::extra_size() const {
  return _internal_extra_size();
}
inline void People::clear_extra() {
  extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
People::_internal_extra() const {
  return extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
People::extra() const {
  // @@protoc_insertion_point(field_map:model.idl.People.Extra)
  return _internal_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
People::_internal_mutable_extra() {
  return extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
People::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:model.idl.People.Extra)
  return _internal_mutable_extra();
}

// optional .model.idl.ExtraInfo ExtraInfo = 6;
inline bool People::_internal_has_extrainfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || extrainfo_ != nullptr);
  return value;
}
inline bool People::has_extrainfo() const {
  return _internal_has_extrainfo();
}
inline void People::clear_extrainfo() {
  if (extrainfo_ != nullptr) extrainfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::model::idl::ExtraInfo& People::_internal_extrainfo() const {
  const ::model::idl::ExtraInfo* p = extrainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::model::idl::ExtraInfo&>(
      ::model::idl::_ExtraInfo_default_instance_);
}
inline const ::model::idl::ExtraInfo& People::extrainfo() const {
  // @@protoc_insertion_point(field_get:model.idl.People.ExtraInfo)
  return _internal_extrainfo();
}
inline void People::unsafe_arena_set_allocated_extrainfo(
    ::model::idl::ExtraInfo* extrainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extrainfo_);
  }
  extrainfo_ = extrainfo;
  if (extrainfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:model.idl.People.ExtraInfo)
}
inline ::model::idl::ExtraInfo* People::release_extrainfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::model::idl::ExtraInfo* temp = extrainfo_;
  extrainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::model::idl::ExtraInfo* People::unsafe_arena_release_extrainfo() {
  // @@protoc_insertion_point(field_release:model.idl.People.ExtraInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::model::idl::ExtraInfo* temp = extrainfo_;
  extrainfo_ = nullptr;
  return temp;
}
inline ::model::idl::ExtraInfo* People::_internal_mutable_extrainfo() {
  _has_bits_[0] |= 0x00000002u;
  if (extrainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::model::idl::ExtraInfo>(GetArenaForAllocation());
    extrainfo_ = p;
  }
  return extrainfo_;
}
inline ::model::idl::ExtraInfo* People::mutable_extrainfo() {
  ::model::idl::ExtraInfo* _msg = _internal_mutable_extrainfo();
  // @@protoc_insertion_point(field_mutable:model.idl.People.ExtraInfo)
  return _msg;
}
inline void People::set_allocated_extrainfo(::model::idl::ExtraInfo* extrainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete extrainfo_;
  }
  if (extrainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::model::idl::ExtraInfo>::GetOwningArena(extrainfo);
    if (message_arena != submessage_arena) {
      extrainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrainfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  extrainfo_ = extrainfo;
  // @@protoc_insertion_point(field_set_allocated:model.idl.People.ExtraInfo)
}

// optional .model.idl.Status status = 7;
inline bool People::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool People::has_status() const {
  return _internal_has_status();
}
inline void People::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::model::idl::Status People::_internal_status() const {
  return static_cast< ::model::idl::Status >(status_);
}
inline ::model::idl::Status People::status() const {
  // @@protoc_insertion_point(field_get:model.idl.People.status)
  return _internal_status();
}
inline void People::_internal_set_status(::model::idl::Status value) {
  assert(::model::idl::Status_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void People::set_status(::model::idl::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:model.idl.People.status)
}

// optional int32 ID32 = 8;
inline bool People::_internal_has_id32() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool People::has_id32() const {
  return _internal_has_id32();
}
inline void People::clear_id32() {
  id32_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t People::_internal_id32() const {
  return id32_;
}
inline int32_t People::id32() const {
  // @@protoc_insertion_point(field_get:model.idl.People.ID32)
  return _internal_id32();
}
inline void People::_internal_set_id32(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  id32_ = value;
}
inline void People::set_id32(int32_t value) {
  _internal_set_id32(value);
  // @@protoc_insertion_point(field_set:model.idl.People.ID32)
}

// -------------------------------------------------------------------

// ExtraInfo

// optional string name = 1;
inline bool ExtraInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtraInfo::has_name() const {
  return _internal_has_name();
}
inline void ExtraInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtraInfo::name() const {
  // @@protoc_insertion_point(field_get:model.idl.ExtraInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtraInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model.idl.ExtraInfo.name)
}
inline std::string* ExtraInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:model.idl.ExtraInfo.name)
  return _s;
}
inline const std::string& ExtraInfo::_internal_name() const {
  return name_.Get();
}
inline void ExtraInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtraInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtraInfo::release_name() {
  // @@protoc_insertion_point(field_release:model.idl.ExtraInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtraInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model.idl.ExtraInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idl
}  // namespace model

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::model::idl::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::idl::Gender>() {
  return ::model::idl::Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
